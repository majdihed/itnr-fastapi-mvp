name: Bulk Patch (CI & Lint Fix)
on:
  workflow_dispatch:

jobs:
  patch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - name: Ensure pyproject.toml
        run: |
          cat > pyproject.toml <<EOF
          [tool.ruff]
          line-length = 100
          target-version = "py312"

          [tool.ruff.lint]
          select = ["E", "F", "I", "UP", "B"]
          ignore = []
          per-file-ignores = { "app/schemas.py" = ["UP045"] }

          [tool.ruff.format]
          quote-style = "double"
          EOF

      - name: Ensure requirements.txt entries
        run: |
          touch requirements.txt
          for pkg in \
            "fastapi==0.112.2" \
            "uvicorn[standard]==0.30.6" \
            "httpx==0.27.2" \
            "python-dotenv==1.0.1" \
            "pydantic==2.9.2" \
            "dateparser==1.2.0" \
            "pytest==8.3.2" \
            "pytest-asyncio==0.23.8"
          do
            grep -q "^${pkg%%==*}==" requirements.txt || echo "$pkg" >> requirements.txt
          done

      - name: Write CI workflow
        run: |
          mkdir -p .github/workflows
          cat > .github/workflows/ci.yml <<EOF
          name: CI
          on:
            push:
              branches: [ "main" ]
            pull_request:
              branches: [ "main" ]
          jobs:
            lint:
              runs-on: ubuntu-latest
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-python@v5
                  with:
                    python-version: "3.12"
                - name: Ruff Lint
                  uses: astral-sh/ruff-action@v3
                  with:
                    src: "./"
                    args: "check ."
            test:
              runs-on: ubuntu-latest
              needs: lint
              steps:
                - uses: actions/checkout@v4
                - uses: actions/setup-python@v5
                  with:
                    python-version: "3.12"
                - name: Install dependencies
                  run: |
                    python -m pip install --upgrade pip
                    pip install -r requirements.txt
                - name: Run pytest
                  env:
                    AMADEUS_CLIENT_ID: "dummy"
                    AMADEUS_CLIENT_SECRET: "dummy"
                    AMADEUS_HOST: "https://example.invalid"
                  run: |
                    pytest -q
          EOF

      - name: Patch app/schemas.py
        run: |
          mkdir -p app
          cat > app/schemas.py <<'EOF'
          from __future__ import annotations
          from typing import Optional
          from pydantic import BaseModel, Field

          class Period(BaseModel):
              start: str
              durationDays: int

          class Passengers(BaseModel):
              adults: int = 1
              children: int = 0
              infants: int = 0

          class SearchBody(BaseModel):
              originCity: str
              destinationCity: Optional[str] = None
              departureDate: Optional[str] = None
              returnDate: Optional[str] = None
              period: Optional[Period] = None
              passengers: Passengers = Field(default_factory=Passengers)
              maxStops: int = 1
              budgetPerPaxEUR: Optional[float] = None
              flexDays: Optional[int] = None
          EOF

      - name: Patch app/utils.py
        run: |
          cat > app/utils.py <<'EOF'
          from __future__ import annotations
          import re
          from typing import Any
          def _parse_iso_duration(d: str) -> int:
              if not d or not d.startswith("PT"):
                  return 0
              hours = 0
              mins = 0
              m = re.search(r"(\d+)H", d)
              if m:
                  hours = int(m.group(1))
              m = re.search(r"(\d+)M", d)
              if m:
                  mins = int(m.group(1))
              return hours * 60 + mins
          def total_duration_minutes(offer: dict[str, Any]) -> int:
              total = 0
              for itin in offer.get("itineraries", []):
                  total += _parse_iso_duration(itin.get("duration", "PT0M"))
              return total
          def count_stops(offer: dict[str, Any]) -> int:
              stops = 0
              for itin in offer.get("itineraries", []):
                  segs = itin.get("segments", []) or []
                  s = max(0, len(segs) - 1)
                  stops = max(stops, s)
              return stops
          def _price(offer: dict[str, Any]) -> float:
              try:
                  return float(offer.get("price", {}).get("grandTotal", "0"))
              except Exception:
                  return 0.0
          def rank_offers(offers: list[dict[str, Any]]) -> dict[str, dict[str, Any] | None]:
              if not offers:
                  return {"cheapest": None, "recommended": None, "direct": None}
              cheapest = min(offers, key=_price)
              direct_candidates = [o for o in offers if count_stops(o) == 0]
              direct = min(direct_candidates, key=_price) if direct_candidates else None
              prices = [_price(o) for o in offers]
              durs = [total_duration_minutes(o) for o in offers]
              pmin, pmax = min(prices), max(prices)
              dmin, dmax = min(durs), max(durs)
              def norm(x: float, lo: float, hi: float) -> float:
                  return 0.5 if hi <= lo else (x - lo) / (hi - lo)
              best = None
              best_score = -1.0
              for o in offers:
                  pn = norm(_price(o), pmin, pmax)
                  dn = norm(total_duration_minutes(o), dmin, dmax)
                  score = 0.6 * (1 - pn) + 0.4 * (1 - dn)
                  if score > best_score:
                      best = o
                      best_score = score
              return {"cheapest": cheapest, "recommended": best, "direct": direct}
          def to_hhmm(mins: int) -> str:
              h = mins // 60
              m = mins % 60
              return f"{h}h{m:02}"
          def to_lite(offer: dict[str, Any], pax_total: int) -> dict[str, Any]:
              price = _price(offer)
              dur = total_duration_minutes(offer)
              carriers: list[str] = []
              legs: list[dict[str, Any]] = []
              for itin in offer.get("itineraries", []):
                  segs = itin.get("segments", []) or []
                  if not segs:
                      continue
                  first = segs[0]["departure"]["iataCode"]
                  last = segs[-1]["arrival"]["iataCode"]
                  dep = segs[0]["departure"]["at"]
                  arr = segs[-1]["arrival"]["at"]
                  for s in segs:
                      c = s.get("carrierCode")
                      if c and c not in carriers:
                          carriers.append(c)
                  legs.append({"from": first, "to": last, "dep": dep, "arr": arr, "stops": max(0, len(segs) - 1)})
              return {
                  "price_total_eur": round(price, 2),
                  "price_per_pax_eur": round(price / max(1, pax_total), 2),
                  "duration_total_min": dur,
                  "duration_total_hhmm": to_hhmm(dur),
                  "stops_max": count_stops(offer),
                  "carriers": carriers,
                  "legs": legs,
              }
          EOF

      - name: Add basic tests
        run: |
          mkdir -p tests
          cat > tests/test_health.py <<'EOF'
          from fastapi.testclient import TestClient
          from app.main import app
          client = TestClient(app)
          def test_health_ok():
              r = client.get("/health")
              assert r.status_code == 200
              assert r.json() == {"status": "ok"}
          EOF
          cat > tests/test_utils.py <<'EOF'
          from app.utils import count_stops, to_hhmm, total_duration_minutes
          def test_to_hhmm():
              assert to_hhmm(0) == "0h00"
              assert to_hhmm(75) == "1h15"
          def test_count_stops_direct():
              offer = {"itineraries": [{"segments": [{}]}]}
              assert count_stops(offer) == 0
          def test_count_stops_one_stop():
              offer = {"itineraries": [{"segments": [{}, {}]}]}
              assert count_stops(offer) == 1
          def test_total_duration_minutes():
              offer = {"itineraries": [{"duration": "PT2H30M"}]}
              assert total_duration_minutes(offer) == 150
          EOF
          cat > tests/test_locations_short_q.py <<'EOF'
          from fastapi.testclient import TestClient
          from app.main import app
          client = TestClient(app)
          def test_locations_too_short():
              r = client.get("/locations?q=p")
              assert r.status_code == 200
              assert r.json() == {"data": []}
          EOF

      - name: Create PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: chore/bulk-ci-lint-fixes
          commit-message: "chore: bulk CI & lint fixes (auto)"
          title: "chore: bulk CI & lint fixes"
          body: |
            Automated patch:
            - Ruff config & per-file ignore for schemas
            - requirements (dateparser + pytest deps)
            - CI workflow (lint + tests)
            - Schemas/utils refactor & formatting
            - Basic tests (health/utils/locations)
          labels: automated
